{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Sensors } from \"./src/Sensors\";\nimport { Switchers } from \"./src/Switchers\";\nimport { Start } from \"./src/Start\";\nimport * as LocalAuthentication from 'expo-local-authentication';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { AppLoading } from 'expo';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GET_DATA } from \"./query/sensor\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useQuery = useQuery(GET_DATA, {\n      variables: {\n        ID: 1\n      }\n    }),\n    dataA = _useQuery.dataA,\n    loadingA = _useQuery.loadingA,\n    errorA = _useQuery.errorA;\n  var _useQuery2 = useQuery(GET_DATA, {\n      variables: {\n        ID: 2\n      }\n    }),\n    dataT = _useQuery2.dataT,\n    loadingT = _useQuery2.loadingT,\n    errorT = _useQuery2.errorT;\n  var _useQuery3 = useQuery(GET_DATA, {\n      variables: {\n        ID: 3\n      }\n    }),\n    dataH = _useQuery3.dataH,\n    loadingH = _useQuery3.loadingH,\n    errorH = _useQuery3.errorH;\n  return _jsx(ApolloProvider, {\n    client: client,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: {\n          height: '15%',\n          justifyContent: 'center'\n        },\n        children: _jsxs(Text, {\n          style: styles.baseText,\n          children: [\"ESP32 HOUSE \", errorA, \" CONTROL\"]\n        })\n      }), _jsx(View, {\n        style: styles.bottom\n      }), _jsx(Sensors, {\n        valueA: dataA,\n        valueT: dataT,\n        valueH: dataH\n      }), _jsx(View, {\n        style: styles.bottom\n      }), _jsx(Switchers, {}), _jsx(Button, {\n        color: \"#a66f6f\",\n        title: \"Go to Home\",\n        onPress: function onPress() {\n          return navigation.navigate('Home');\n        }\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#F5F0F0',\n    alignItems: 'center',\n    justifyContent: 'space-around'\n  },\n  baseText: {\n    fontSize: 25,\n    fontWeight: 'bold'\n  },\n  bottom: {\n    borderStartWidth: 300\n  },\n  button: {\n    borderRadius: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#a66f6f\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","Sensors","Switchers","Start","LocalAuthentication","createNativeStackNavigator","StatusBar","ApolloClient","InMemoryCache","ApolloProvider","AppLoading","useMutation","useQuery","GET_DATA","client","uri","cache","Stack","App","variables","ID","dataA","loadingA","errorA","dataT","loadingT","errorT","dataH","loadingH","errorH","styles","container","height","justifyContent","baseText","bottom","navigation","navigate","StyleSheet","create","flex","flexDirection","backgroundColor","alignItems","fontSize","fontWeight","borderStartWidth","button","borderRadius"],"sources":["D:/WEB/First app/first-app/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {NavigationContainer} from '@react-navigation/native';\nimport { Button, StyleSheet, Text, View } from 'react-native'\nimport { Sensors } from './src/Sensors'\nimport { Switchers } from './src/Switchers'\nimport { Start } from './src/Start'\nimport * as LocalAuthentication from 'expo-local-authentication'\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { AppLoading } from 'expo'\nimport {useMutation, useQuery} from \"@apollo/client\";\nimport {GET_DATA} from \"./query/sensor\";\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache(),\n  //defaultOptions: { watchQuery: { fetchPolicy: 'cache-and-network' } },\n})\n// import { library } from '@fortawesome/fontawesome-svg-core'\n// import { fab } from '@fortawesome/free-brands-svg-icons'\n// import {\n//   faCloud, faWater, faThermometerHalf, faFire, faLightbulb, faDoorOpen\n// } from \"@fortawesome/free-solid-svg-icons\";\n//library.add(fab, faCloud, faWater, faThermometerHalf, faFire, faLightbulb, faDoorOpen)\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const {dataA, loadingA, errorA} = useQuery(GET_DATA, {\n    variables: {\n        ID: 1\n    }\n  })\n  const {dataT, loadingT, errorT} = useQuery(GET_DATA, {\n    variables: {\n        ID: 2\n    }\n  })\n  const {dataH, loadingH, errorH} = useQuery(GET_DATA, {\n    variables: {\n        ID: 3\n    }\n})\n    return(\n      <ApolloProvider client={client}>\n      {/* <NavigationContainer>\n      <Stack.Navigator> */}\n        {/* <Stack.Screen \n          name=\"Home\" \n          component={HomeScreen}\n          options={{title: 'Control app'}}\n        /> */}\n        {/* <Stack.Screen \n          name=\"Profile\" \n          component={ProfileScreen} \n          options={{title: 'Control app'}}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>  */}\n        <View style={styles.container}> \n      <View style={{height: '15%', justifyContent: 'center',}}><Text style={styles.baseText}>ESP32 HOUSE {errorA} CONTROL</Text></View> \n      <View style={styles.bottom} />\n      <Sensors valueA={dataA} valueT={dataT} valueH={dataH}/>\n      <View style={styles.bottom} />\n      <Switchers/>    \n      <Button\n        color='#a66f6f'\n        title=\"Go to Home\"\n        onPress={() => navigation.navigate('Home')}\n      />   \n      {/* <Button title=\"Go back\" onPress={() => navigation.goBack()} /> */}\n      {/* <Text>This is page with {route.params.data}</Text>   */}   \n    </View>\n    </ApolloProvider>   \n    ); \n}\n\n// const HomeScreen = ({navigation}) => {\n//   const goToData = () =>\n//     navigation.navigate('Profile');\n\n//   return (\n//     <View style={styles.container}>   \n//     <Start onPress={goToData}/> \n//     <StatusBar style=\"auto\"/>  \n//     </View>\n//   );\n// };\n\n// const ProfileScreen = ({navigation}) => {\n  \n\n// if (loadingA || loadingT || loadingH) {\n//   return <h1>Loading...</h1>\n// }\n// console.log(dataA)\n// console.log(dataT)\n// console.log(dataH)\n//   return (\n//     );\n// };\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#F5F0F0',\n    alignItems: 'center',\n    justifyContent: 'space-around', \n     \n  },\n  baseText: {\n    fontSize: 25,\n    fontWeight: 'bold',\n  },\n  bottom: {\n    borderStartWidth: 300,\n  },\n  button: {\n    //width: \"10%\",\n    borderRadius: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#a66f6f\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}