{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport ExpoLocalAuthentication from \"./ExpoLocalAuthentication\";\nimport { AuthenticationType, SecurityLevel } from \"./LocalAuthentication.types\";\nexport { AuthenticationType, SecurityLevel };\nexport function hasHardwareAsync() {\n  return _hasHardwareAsync.apply(this, arguments);\n}\nfunction _hasHardwareAsync() {\n  _hasHardwareAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.hasHardwareAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n    }\n    return yield ExpoLocalAuthentication.hasHardwareAsync();\n  });\n  return _hasHardwareAsync.apply(this, arguments);\n}\nexport function supportedAuthenticationTypesAsync() {\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\nfunction _supportedAuthenticationTypesAsync() {\n  _supportedAuthenticationTypesAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n    }\n    return yield ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n  });\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\nexport function isEnrolledAsync() {\n  return _isEnrolledAsync.apply(this, arguments);\n}\nfunction _isEnrolledAsync() {\n  _isEnrolledAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.isEnrolledAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n    }\n    return yield ExpoLocalAuthentication.isEnrolledAsync();\n  });\n  return _isEnrolledAsync.apply(this, arguments);\n}\nexport function getEnrolledLevelAsync() {\n  return _getEnrolledLevelAsync.apply(this, arguments);\n}\nfunction _getEnrolledLevelAsync() {\n  _getEnrolledLevelAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n    }\n    return yield ExpoLocalAuthentication.getEnrolledLevelAsync();\n  });\n  return _getEnrolledLevelAsync.apply(this, arguments);\n}\nexport function authenticateAsync() {\n  return _authenticateAsync.apply(this, arguments);\n}\nfunction _authenticateAsync() {\n  _authenticateAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExpoLocalAuthentication.authenticateAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n    }\n    if (options.hasOwnProperty('promptMessage')) {\n      invariant(typeof options.promptMessage === 'string' && options.promptMessage.length, 'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.');\n    }\n    var promptMessage = options.promptMessage || 'Authenticate';\n    var result = yield ExpoLocalAuthentication.authenticateAsync(_objectSpread(_objectSpread({}, options), {}, {\n      promptMessage: promptMessage\n    }));\n    return result;\n  });\n  return _authenticateAsync.apply(this, arguments);\n}\nexport function cancelAuthenticate() {\n  return _cancelAuthenticate.apply(this, arguments);\n}\nfunction _cancelAuthenticate() {\n  _cancelAuthenticate = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.cancelAuthenticate) {\n      throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n    }\n    yield ExpoLocalAuthentication.cancelAuthenticate();\n  });\n  return _cancelAuthenticate.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/LocalAuthentication.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAmB,QAAQ,mBAAmB;AACvD,OAAO,SAAS,MAAM,WAAW;AAEjC,OAAO,uBAAuB;AAC9B,SAEE,kBAAkB,EAElB,aAAa;AAGf,SAAqC,kBAAkB,EAA6B,aAAa;AAQjG,gBAAsB,gBAAgB;EAAA;AAAA;AAKrC;EAAA,sCALM,aAA+B;IACpC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,EAAE;MAC7C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,kBAAkB,CAAC;IAC/E;IACD,aAAa,uBAAuB,CAAC,gBAAgB,EAAE;EACzD,CAAC;EAAA;AAAA;AAUD,gBAAsB,iCAAiC;EAAA;AAAA;AAKtD;EAAA,uDALM,aAAgD;IACrD,IAAI,CAAC,uBAAuB,CAAC,iCAAiC,EAAE;MAC9D,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,mCAAmC,CAAC;IAChG;IACD,aAAa,uBAAuB,CAAC,iCAAiC,EAAE;EAC1E,CAAC;EAAA;AAAA;AAQD,gBAAsB,eAAe;EAAA;AAAA;AAKpC;EAAA,qCALM,aAA8B;IACnC,IAAI,CAAC,uBAAuB,CAAC,eAAe,EAAE;MAC5C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,iBAAiB,CAAC;IAC9E;IACD,aAAa,uBAAuB,CAAC,eAAe,EAAE;EACxD,CAAC;EAAA;AAAA;AAUD,gBAAsB,qBAAqB;EAAA;AAAA;AAK1C;EAAA,2CALM,aAAoC;IACzC,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,EAAE;MAClD,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,uBAAuB,CAAC;IACpF;IACD,aAAa,uBAAuB,CAAC,qBAAqB,EAAE;EAC9D,CAAC;EAAA;AAAA;AAYD,gBAAsB,iBAAiB;EAAA;AAAA;AAkBtC;EAAA,uCAlBM,aACmC;IAAA,IAAxC,OAAA,uEAAsC,CAAA,CAAE;IAExC,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,EAAE;MAC9C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,mBAAmB,CAAC;IAChF;IAED,IAAI,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;MAC3C,SAAS,CACP,OAAO,OAAO,CAAC,aAAa,KAAK,QAAQ,IAAI,OAAO,CAAC,aAAa,CAAC,MAAM,EACzE,6FAA6F,CAC9F;IACF;IAED,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,cAAc;IAC7D,IAAM,MAAM,SAAS,uBAAuB,CAAC,iBAAiB,iCAAM,OAAO;MAAE,aAAa,EAAb;IAAa,GAAG;IAE7F,OAAO,MAAM;EACf,CAAC;EAAA;AAAA;AAOD,gBAAsB,kBAAkB;EAAA;AAAA;AAKvC;EAAA,wCALM,aAAiC;IACtC,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,EAAE;MAC/C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,oBAAoB,CAAC;IACjF;IACD,MAAM,uBAAuB,CAAC,kBAAkB,EAAE;EACpD,CAAC;EAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n  SecurityLevel,\n} from './LocalAuthentication.types';\n\nexport { LocalAuthenticationOptions, AuthenticationType, LocalAuthenticationResult, SecurityLevel };\n\n// @needsAudit\n/**\n * Determine whether a face or fingerprint scanner is available on the device.\n * @return Returns a promise which fulfils with a `boolean` value indicating whether a face or\n * fingerprint scanner is available on this device.\n */\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kinds of authentications are available on the device.\n * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n *\n * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\n * fingerprint and facial recognition. If none are supported, this method returns an empty array.\n */\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\n// @needsAudit\n/**\n * Determine whether the device has saved fingerprints or facial data to use for authentication.\n * @return Returns a promise which fulfils to `boolean` value indicating whether the device has\n * saved fingerprints or facial data for authentication.\n */\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kind of authentication is enrolled on the device.\n * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\n * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\n * prompts.\n */\nexport async function getEnrolledLevelAsync(): Promise<SecurityLevel> {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\n\n// @needsAudit\n/**\n * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).\n * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.\n * If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription`\n * in `app.json`, the module will authenticate using device passcode. For more information about\n * usage descriptions on iOS, see [permissions guide](/guides/permissions/#ios).\n * @param options\n * @return Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).\n */\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const result = await ExpoLocalAuthentication.authenticateAsync({ ...options, promptMessage });\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Cancels authentication flow.\n * @platform android\n */\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}